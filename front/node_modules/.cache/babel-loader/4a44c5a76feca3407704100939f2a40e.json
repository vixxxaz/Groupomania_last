{"ast":null,"code":"export default function register(toast) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) return;\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      let isAppOnline = navigator.onLine;\n      let isLocalhost = window.location();\n      window.addEventListener('online', () => {\n        if (!isAppOnline) {\n          toast('ðŸ¦„ The connectivity is back, sync in progress...');\n          isAppOnline = true;\n        }\n      });\n      window.addEventListener('offline', () => {\n        toast.warn('The app is running offline, any changes mades during this time will be synced as soon as the connectivity is back');\n        isAppOnline = false;\n      });\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, toast);\n      } else {\n        registerValidSW(swUrl, toast);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, toast) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            toast.info('ðŸ”„ New content is available; please refresh.');\n          } else {\n            toast('ðŸš€ Content is cached for offline use.');\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    toast.error('Error during service worker registration: ' + error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, toast) {\n  fetch(swUrl).then(response => {\n    if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValidSW(swUrl);\n    }\n  }).catch(() => {\n    toast('ðŸ’© No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"names":["register","toast","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","window","location","origin","addEventListener","swUrl","isAppOnline","onLine","isLocalhost","warn","checkValidServiceWorker","registerValidSW","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","info","catch","error","fetch","response","status","headers","get","indexOf","ready","unregister","reload"],"sources":["C:/Users/Utilisateur/Desktop/Vincent/front/src/services/registerServiceWorker.js"],"sourcesContent":["export default function register(toast) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) return;\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n        let isAppOnline = navigator.onLine;\r\n        let isLocalhost = window.location()\r\n  \r\n        window.addEventListener('online', () => {\r\n          if(!isAppOnline){\r\n            toast('ðŸ¦„ The connectivity is back, sync in progress...');\r\n            isAppOnline = true;\r\n          }\r\n        });\r\n  \r\n        window.addEventListener('offline', () => {\r\n          toast.warn('The app is running offline, any changes mades during this time will be synced as soon as the connectivity is back');\r\n          isAppOnline = false;\r\n        });\r\n  \r\n        if (isLocalhost) {\r\n          checkValidServiceWorker(swUrl, toast);\r\n        } else {\r\n          registerValidSW(swUrl, toast);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, toast) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                toast.info('ðŸ”„ New content is available; please refresh.')\r\n              } else {\r\n                toast('ðŸš€ Content is cached for offline use.')\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        toast.error('Error during service worker registration: ' + error,);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, toast) {\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        toast(\r\n          'ðŸ’© No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}